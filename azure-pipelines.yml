# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  workload_yaml: demo-az-pipeline.yaml
  workload: demo-az-pipeline
  container: az-httpbin

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Docker@2
  inputs:
    containerRegistry: 'rafay-registry'
    repository: 'test_prod_org_private/kutumba.manne/httpbin'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
  displayName: 'Build and push image'

- script: |
    export RCTL_API_KEY=$(RCTL_API_KEY)
    export RCTL_API_SECRET=$(RCTL_API_SECRET)
    wget -O ${HOME}/rctl-linux-amd64.tar.bz2 https://s3-us-west-2.amazonaws.com/rafay-prod-cli/publish/rctl-linux-amd64.tar.bz2
    tar -C ${HOME} -xf ${HOME}/rctl-linux-amd64.tar.bz2
    chmod 0755 ${HOME}/rctl
    mkdir -p ${HOME}/.rafay/cli
    ${HOME}/rctl workload create $(workload_yaml)
    ${HOME}/rctl workload set-image $(workload) $(container) $(RAFAY_REGISTRY_ENDPOINT)/$(RAFAY_ORGANIZATION_LABEL)/$(container):$(Build.BuildId)
    ${HOME}/rctl workload publish $(workload)
    workload_status="Not Ready"
    workload_status_iterations=1
    while [ "$workload_status" != "Ready" ];
    do
      workload_status=`${HOME}/rctl workload status $(workload) -o json|jq .result[].status|tr -d '"'`
      echo $workload_status
      sleep 30
      if [ $workload_status_iterations -ge 30 ];
      then
        break
      fi
      if [ "$workload_status" = "Failed" ];
      then
        echo "Workload Deployment Failed"
        break
      fi
      workload_status_iterations=$((workload_status_iterations+1))
    done
  displayName: 'create and publish workload'
